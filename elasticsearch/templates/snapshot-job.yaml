{{- if .Values.snapshotAutomation.enabled }}
apiVersion: batch/v1
kind: CronJob
metadata:
  name: {{ include "elasticsearch.fullname" . }}-snapshot-job
  labels:
    {{- include "elasticsearch.labels" . | nindent 4 }}
spec:
  schedule: "{{ .Values.snapshotAutomation.schedule.cron | default "*/2 * * * *" }}"  # Every 2 minutes
  concurrencyPolicy: Forbid
  successfulJobsHistoryLimit: 3
  failedJobsHistoryLimit: 3
  jobTemplate:
    spec:
      template:
        spec:
          restartPolicy: OnFailure
          containers:
          - name: snapshot-manager
            image: curlimages/curl:latest
            command: ["/bin/bash"]
            args:
            - -c
            - |
              set -euo pipefail
              
              # Configuration
              ELASTICSEARCH_URL="http://{{ include "elasticsearch.fullname" . }}:{{ .Values.containerPorts.restAPI }}"
              REPOSITORY_NAME="azure-repo"
              SNAPSHOT_PREFIX="daily-snapshot"
              RETENTION_DAYS={{ .Values.snapshotAutomation.retention.days | default 30 }}
              MAX_SNAPSHOTS={{ .Values.snapshotAutomation.retention.maxSnapshots | default 100 }}
              
              # Colors for output
              RED='\033[0;31m'
              GREEN='\033[0;32m'
              YELLOW='\033[1;33m'
              NC='\033[0m'
              
              log() {
                  echo -e "${GREEN}[$(date +'%Y-%m-%d %H:%M:%S')] $1${NC}"
              }
              
              warn() {
                  echo -e "${YELLOW}[$(date +'%Y-%m-%d %H:%M:%S')] WARNING: $1${NC}"
              }
              
              error() {
                  echo -e "${RED}[$(date +'%Y-%m-%d %H:%M:%S')] ERROR: $1${NC}"
                  exit 1
              }
              
              # Wait for Elasticsearch to be ready
              wait_for_elasticsearch() {
                  log "Waiting for Elasticsearch to be ready..."
                  local max_attempts=60
                  local attempt=1
                  
                  while [ $attempt -le $max_attempts ]; do
                      if curl -s -f "$ELASTICSEARCH_URL/_cluster/health" > /dev/null 2>&1; then
                          log "Elasticsearch is ready!"
                          return 0
                      fi
                      
                      log "Attempt $attempt/$max_attempts: Elasticsearch not ready yet, waiting 10 seconds..."
                      sleep 10
                      attempt=$((attempt + 1))
                  done
                  
                  error "Elasticsearch failed to become ready after $max_attempts attempts"
              }
              
              # Create repository if it doesn't exist
              create_repository() {
                  log "Checking if repository '$REPOSITORY_NAME' exists..."
                  
                  if curl -s -f "$ELASTICSEARCH_URL/_snapshot/$REPOSITORY_NAME" > /dev/null 2>&1; then
                      log "Repository '$REPOSITORY_NAME' already exists"
                      return 0
                  fi
                  
                  log "Creating repository '$REPOSITORY_NAME'..."
                  
                  local repo_config='{
                      "type": "azure",
                      "settings": {
                          "container": "{{ .Values.snapshotAutomation.azureStorage.container | default "elasticsearch-snapshots" }}",
                          "base_path": "{{ .Values.snapshotAutomation.azureStorage.basePath | default "snapshots" }}",
                          "compress": true,
                          "chunk_size": "1g"
                      }
                  }'
                  
                  if curl -s -f -XPUT "$ELASTICSEARCH_URL/_snapshot/$REPOSITORY_NAME" \
                      -H 'Content-Type: application/json' \
                      -d "$repo_config"; then
                      log "Repository '$REPOSITORY_NAME' created successfully"
                  else
                      error "Failed to create repository '$REPOSITORY_NAME'"
                  fi
              }
              
              # Create snapshot
              create_snapshot() {
                  local snapshot_name="${SNAPSHOT_PREFIX}-$(date +%Y%m%d-%H%M%S)"
                  log "Creating snapshot '$snapshot_name'..."
                  
                  local snapshot_config='{
                      "indices": "*,-.security*,-.kibana*,-.apm*,-.watches*,-.triggered_watches*,-.watcher-history*,-.ml*",
                      "ignore_unavailable": true,
                      "include_global_state": false,
                      "metadata": {
                          "created_by": "snapshot-automation",
                          "created_at": "'$(date -u +%Y-%m-%dT%H:%M:%SZ)'",
                          "retention_days": '$RETENTION_DAYS'
                      }
                  }'
                  
                  if curl -s -f -XPUT "$ELASTICSEARCH_URL/_snapshot/$REPOSITORY_NAME/$snapshot_name?wait_for_completion=true" \
                      -H 'Content-Type: application/json' \
                      -d "$snapshot_config"; then
                      log "Snapshot '$snapshot_name' created successfully"
                  else
                      error "Failed to create snapshot '$snapshot_name'"
                  fi
              }
              
              # Clean up old snapshots
              cleanup_old_snapshots() {
                  log "Cleaning up old snapshots..."
                  
                  # Get all snapshots
                  local snapshots_json=$(curl -s -f "$ELASTICSEARCH_URL/_snapshot/$REPOSITORY_NAME/_all")
                  if [ $? -ne 0 ]; then
                      warn "Failed to get snapshots list, skipping cleanup"
                      return 0
                  fi
                  
                  # Parse snapshots and sort by start_time
                  local snapshots_to_delete=$(echo "$snapshots_json" | jq -r '
                      .snapshots[] | 
                      select(.snapshot | startswith("'$SNAPSHOT_PREFIX'-")) |
                      select(.state == "SUCCESS") |
                      [.snapshot, .start_time_in_millis] | @tsv' | 
                      sort -k2 -n | 
                      head -n -$MAX_SNAPSHOTS | 
                      cut -f1)
                  
                  if [ -n "$snapshots_to_delete" ]; then
                      log "Found $(echo "$snapshots_to_delete" | wc -l) old snapshots to delete"
                      
                      echo "$snapshots_to_delete" | while read -r snapshot; do
                          if [ -n "$snapshot" ]; then
                              log "Deleting snapshot '$snapshot'..."
                              if curl -s -f -XDELETE "$ELASTICSEARCH_URL/_snapshot/$REPOSITORY_NAME/$snapshot"; then
                                  log "Snapshot '$snapshot' deleted successfully"
                              else
                                  warn "Failed to delete snapshot '$snapshot'"
                              fi
                          fi
                      done
                  else
                      log "No old snapshots to delete"
                  fi
              }
              
              # Main execution
              main() {
                  log "Starting snapshot automation..."
                  
                  wait_for_elasticsearch
                  create_repository
                  create_snapshot
                  cleanup_old_snapshots
                  
                  log "Snapshot automation completed successfully"
              }
              
              # Run main function
              main "$@"
            env:
            - name: azure.client.default.account
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.extraEnvVarsSecret | default "elasticsearch-azure-credentials" }}
                  key: azure.client.default.account
            - name: azure.client.default.key
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.extraEnvVarsSecret | default "elasticsearch-azure-credentials" }}
                  key: azure.client.default.key
            resources:
              requests:
                memory: "64Mi"
                cpu: "50m"
              limits:
                memory: "128Mi"
                cpu: "100m"
{{- end }} 